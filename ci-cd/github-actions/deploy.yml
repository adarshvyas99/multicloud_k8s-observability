name: Deploy Kubernetes Observability Stack

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'manifests/**'
      - 'configs/**'
      - 'scripts/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
        - gke-migration
        - eks-migration

env:
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

jobs:
  validate:
    name: Validate Manifests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes manifests..."
        find manifests/ -name "*.yaml" -exec kubectl apply --dry-run=client -f {} \;

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Development
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update storage class for target environment
        sed -i 's/storageClassName: managed-premium/storageClassName: managed-premium/g' manifests/prometheus/prometheus-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: managed-premium/g' manifests/alertmanager/alertmanager-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: managed-premium/g' manifests/grafana/grafana-deployment.yaml
        
        # Deploy components
        kubectl apply -f manifests/namespace/monitoring-namespace.yaml
        kubectl apply -f manifests/exporters/
        kubectl apply -f manifests/prometheus/prometheus-deployment.yaml
        kubectl apply -f manifests/alertmanager/alertmanager-deployment.yaml
        kubectl apply -f manifests/grafana/grafana-deployment.yaml
        
        # Wait for deployments
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/alertmanager -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update storage class for target environment
        sed -i 's/storageClassName: managed-premium/storageClassName: managed-premium/g' manifests/prometheus/prometheus-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: managed-premium/g' manifests/alertmanager/alertmanager-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: managed-premium/g' manifests/grafana/grafana-deployment.yaml
        
        # Deploy components
        kubectl apply -f manifests/namespace/monitoring-namespace.yaml
        kubectl apply -f manifests/exporters/
        kubectl apply -f manifests/prometheus/prometheus-deployment.yaml
        kubectl apply -f manifests/alertmanager/alertmanager-deployment.yaml
        kubectl apply -f manifests/grafana/grafana-deployment.yaml
        
        # Wait for deployments
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/alertmanager -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        echo "Verifying deployment health..."
        kubectl get pods -n monitoring
        kubectl get svc -n monitoring

  migrate-gke:
    name: Deploy to GKE (Migration)
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch'
    environment: gke-production
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for GKE
      run: |
        echo "${{ secrets.GKE_KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to GKE
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update storage class for GKE
        sed -i 's/storageClassName: managed-premium/storageClassName: standard-rwo/g' manifests/prometheus/prometheus-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: standard-rwo/g' manifests/alertmanager/alertmanager-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: standard-rwo/g' manifests/grafana/grafana-deployment.yaml
        
        # Deploy components
        kubectl apply -f manifests/namespace/monitoring-namespace.yaml
        kubectl apply -f manifests/exporters/
        kubectl apply -f manifests/prometheus/prometheus-deployment.yaml
        kubectl apply -f manifests/alertmanager/alertmanager-deployment.yaml
        kubectl apply -f manifests/grafana/grafana-deployment.yaml
        
        # Wait for deployments
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/alertmanager -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring

  migrate-eks:
    name: Deploy to EKS (Migration)
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch'
    environment: eks-production
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for EKS
      run: |
        echo "${{ secrets.EKS_KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to EKS
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update storage class for EKS
        sed -i 's/storageClassName: managed-premium/storageClassName: gp2/g' manifests/prometheus/prometheus-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: gp2/g' manifests/alertmanager/alertmanager-deployment.yaml
        sed -i 's/storageClassName: managed-premium/storageClassName: gp2/g' manifests/grafana/grafana-deployment.yaml
        
        # Deploy components
        kubectl apply -f manifests/namespace/monitoring-namespace.yaml
        kubectl apply -f manifests/exporters/
        kubectl apply -f manifests/prometheus/prometheus-deployment.yaml
        kubectl apply -f manifests/alertmanager/alertmanager-deployment.yaml
        kubectl apply -f manifests/grafana/grafana-deployment.yaml
        
        # Wait for deployments
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/alertmanager -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring